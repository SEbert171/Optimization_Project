function [outputArg1,outputArg2] = solve_Penalty_NLP_Newton(f,g,gamma,max_constraint_violation, max_NLP_iterations, iguess)
%UNTITLED4 Summary of this function goes here
%   Detailed explanation goes here


        rguess=iguess; %rguess -> record guesses; iguess -> initial guess
        [Jp,~] = penalty_derivatives(f,g,iguess,gamma);
        n=0;
        k=1;
        %NLP step
        while (n<=max_NLP_iterations)
            l=0;
            %Newton step
            while (norm(Jp) > e && l<= max_Newton_iterations)
                disp(['Newton iteration: ',num2str(l),' for NLP-iteration ',num2str(n)]);
                [Jp,Hp] = penalty_derivatives(f,g,iguess,gamma);
                iguess = iguess - Hp\Jp;
                rguess=iguess;
                l=l+1;
            end
        constraint_violation = subs(g,[X,Y], [rguess(1),rguess(2)]);
        if (norm(Jp) <= 10^(-10-k+1) && norm(constraint_violation) <= max_constraint_violation)
            break
        end
        n=n+1;
        k=k+1;
    gamma=gamma*10;
    end
end